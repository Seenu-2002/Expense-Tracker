import com.ajay.seenu.expensetracker.entity.PaymentType;
import com.ajay.seenu.expensetracker.entity.TransactionType;

CREATE TABLE TransactionDetail (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    type TEXT AS TransactionType NOT NULL,
    amount REAL NOT NULL,
    category INTEGER NOT NULL,
    paymentType TEXT AS PaymentType NOT NULL,
    date INTEGER NOT NULL,
    note TEXT,
    payer TEXT,
    place TEXT,
    FOREIGN KEY(category) REFERENCES Category(id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

CREATE TABLE Category (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    label TEXT NOT NULL,
    type TEXT AS TransactionType NOT NULL,
    iconRes INTEGER NOT NULL,
    color INTEGER NOT NULL ,
    UNIQUE (label, type) ON CONFLICT REPLACE
);

CREATE TABLE Attachment (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    transactionId INTEGER NOT NULL, -- Foreign key to link to the ITEM table
    name TEXT NOT NULL,
    filePath TEXT NOT NULL,
    fileType TEXT NOT NULL,
    size INTEGER NOT NULL,
    imageUri TEXT NOT NULL,
    FOREIGN KEY (transactionId) REFERENCES TransactionDetail(id) ON DELETE CASCADE
);

CREATE INDEX transaction_time ON TransactionDetail(date);

getAllTransactions:
SELECT *
FROM TransactionDetail ORDER BY date DESC LIMIT :limit OFFSET :offset;

getTransactionsCount:
SELECT COUNT(*) FROM TransactionDetail;

getAllTransactionsBetween:
SELECT *
FROM TransactionDetail WHERE date >= :startUTCValue AND date <= :endUTCValue
ORDER BY date DESC LIMIT :limit OFFSET :offset;

getAllTransactionsByType:
SELECT *
FROM TransactionDetail WHERE type = :type ORDER BY date DESC LIMIT :limit OFFSET :offset;

getTransaction:
SELECT *
FROM TransactionDetail WHERE id = :id;

addTransaction:
INSERT INTO TransactionDetail(type, amount, category, paymentType, note, date, payer, place)
VALUES (?,?, ?, ?, ?, ?, ?, ?);

updateTransaction:
INSERT OR REPLACE INTO TransactionDetail(id, type, amount, category, paymentType, note, date, payer, place)
VALUES ( ?,?, ?, ?, ?, ?, ?, ?, ?);

getLastInsertTransactionRowId:
SELECT last_insert_rowid();

deleteAllTransactions:
DELETE FROM TransactionDetail;

deleteAllTransactionsByType:
DELETE FROM TransactionDetail WHERE type = :type;

deleteTransaction:
DELETE FROM TransactionDetail WHERE id = :id;

changeCategory:
UPDATE TransactionDetail SET category = :newCategory WHERE category = :oldCategory;

numberOfTransactionsByCategory:
SELECT COUNT(*) AS count FROM TransactionDetail WHERE category = :category;

getSumOfAmountByType:
SELECT SUM(amount) AS sum FROM TransactionDetail WHERE type = :type;

getSumOfAmountBetweenByType:
SELECT SUM(amount) AS sum FROM TransactionDetail WHERE type = :type
AND date >= :startUTCValue AND date <= :endUTCValue;

getAllCategories:
SELECT * FROM Category;

getCategories:
SELECT * FROM Category WHERE type = :type;

deleteCategory:
DELETE FROM Category WHERE id = ?;

addCategory:
INSERT INTO Category(label, type, iconRes, color)
VALUES (?,?, ?, ?);

getCategory:
SELECT * FROM Category WHERE id = ?;

updateCategory:
UPDATE Category
SET label = ?, iconRes = ?, color = ?
WHERE id = ?;

searchCategory:
SELECT * FROM Category WHERE label = :label AND type = :type;

getTotalTransactionPerDayByTypeBetween:
SELECT date, category, SUM(amount) AS totalAmount FROM TransactionDetail WHERE type = :type AND date >= :startUTCValue AND date <= :endUTCValue GROUP BY date, category ORDER BY date DESC;

getTotalExpenseByPaymentTypeBetween:
SELECT paymentType, SUM(amount) AS totalAmount FROM TransactionDetail WHERE type = "EXPENSE" AND date >= :startUTCValue AND date <= :endUTCValue GROUP BY paymentType ORDER BY totalAmount DESC;

getTotalExpenseByCategoryBetween:
SELECT category, SUM(amount) AS totalAmount FROM TransactionDetail WHERE type = "EXPENSE" AND date >= :startUTCValue AND date <= :endUTCValue GROUP BY category ORDER BY totalAmount DESC;

getTotalAmountByCategoryAndTypeBetween:
SELECT category, SUM(amount) AS total FROM TransactionDetail WHERE type = :type AND date >= :startUTCValue AND date <= :endUTCValue GROUP BY category ORDER BY category ASC;

getAllAttachmentsForTransaction:
SELECT * FROM Attachment WHERE transactionId = ?;

insertAttachment:
INSERT INTO Attachment (transactionId, name, filePath, fileType, size, imageUri)
VALUES (?, ?, ?, ?, ?, ?);

deleteAttachmentById:
DELETE FROM Attachment WHERE id = ?;

deleteAttachmentsByTransactionId:
DELETE FROM Attachment WHERE transactionId = ?;

CREATE TABLE Budget (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT NOT NULL,
    categoryId INTEGER,  -- NULL for overall budget, specific category_id for category budget
    amount REAL NOT NULL,
    periodType TEXT NOT NULL, -- 'MONTHLY', 'WEEKLY', 'YEARLY', 'CUSTOM'
    startDate INTEGER NOT NULL,
    endDate INTEGER,  -- NULL for recurring budgets, specific date for custom period
    isRecurring INTEGER NOT NULL DEFAULT 1, -- 0 for false, 1 for true
    createdAt INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
    updatedAt INTEGER NOT NULL DEFAULT (strftime('%s', 'now')),
    isActive INTEGER NOT NULL DEFAULT 1
);

-- Index for better query performance
CREATE INDEX idx_budget_category ON Budget(categoryId);
CREATE INDEX idx_budget_active ON Budget(isActive);
CREATE INDEX idx_budget_period ON Budget(startDate, endDate);

-- Queries for Budget operations
selectAllActiveBudgets:
SELECT * FROM Budget
WHERE isActive = 1
ORDER BY createdAt DESC;

selectBudgetsByCategory:
SELECT * FROM Budget
WHERE categoryId = ? AND isActive = 1;

selectOverallBudgets:
SELECT * FROM Budget
WHERE categoryId IS NULL AND isActive = 1;

selectBudgetById:
SELECT * FROM Budget
WHERE id = ?;

selectActiveBudgetsForPeriod:
SELECT * FROM Budget
WHERE isActive = 1
AND (
    (isRecurring = 1) OR
    (startDate <= ? AND (endDate IS NULL OR endDate >= ?))
);

insertBudget:
INSERT INTO Budget (name, categoryId, amount, periodType, startDate, endDate, isRecurring)
VALUES (?, ?, ?, ?, ?, ?, ?);

updateBudget:
UPDATE Budget
SET name = ?, categoryId = ?, amount = ?, periodType = ?,
    startDate = ?, endDate = ?, isRecurring = ?,
    updatedAt = strftime('%s', 'now')
WHERE id = ?;

deleteBudget:
UPDATE Budget
SET isActive = 0, updatedAt = strftime('%s', 'now')
WHERE id = ?;

-- Query to get budget spending for a specific period
getBudgetSpendingForPeriod:
SELECT
    b.id,
    b.name,
    b.amount,
    b.categoryId,
    COALESCE(SUM(CASE WHEN t.type = 'EXPENSE' THEN t.amount ELSE 0 END), 0)
FROM Budget b
LEFT JOIN TransactionDetail t ON (
    (b.categoryId IS NULL OR b.categoryId = t.category)
    AND t.date >= ?
    AND t.date <= ?
    AND t.type = 'EXPENSE'
)
WHERE b.isActive = 1
AND b.id = ?
GROUP BY b.id;