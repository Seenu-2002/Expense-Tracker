import com.ajay.seenu.expensetracker.data.model.TransactionTypeEntity;
import com.ajay.seenu.expensetracker.data.model.AccountGroupTypeEntity;

CREATE TABLE TransactionDetailEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    type TEXT AS TransactionTypeEntity NOT NULL,
    amount REAL NOT NULL,
    categoryId INTEGER NOT NULL,
    accountId INTEGER NOT NULL,
    createdAt INTEGER NOT NULL,
    note TEXT,
    place TEXT,
    FOREIGN KEY(categoryId) REFERENCES CategoryEntity(id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT,
    FOREIGN KEY(accountId) REFERENCES AccountEntity(id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);
CREATE INDEX transaction_time ON TransactionDetailEntity(createdAt);

CREATE TABLE CategoryEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    label TEXT NOT NULL,
    type TEXT AS TransactionTypeEntity NOT NULL,
    iconRes INTEGER NOT NULL,
    color INTEGER NOT NULL ,
    UNIQUE (label, type) ON CONFLICT REPLACE
);

CREATE TABLE AttachmentEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    transactionId INTEGER NOT NULL, -- Foreign key to link to the ITEM table
    name TEXT NOT NULL,
    filePath TEXT NOT NULL,
    fileType TEXT NOT NULL,
    size INTEGER NOT NULL,
    imageUri TEXT NOT NULL,
    FOREIGN KEY (transactionId) REFERENCES TransactionDetailEntity(id) ON DELETE CASCADE
);
CREATE INDEX transactionId ON AttachmentEntity(transactionId);

CREATE TABLE AccountGroupEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    type TEXT AS AccountGroupTypeEntity NOT NULL
);

CREATE TABLE AccountEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    groupId INTEGER NOT NULL,
    FOREIGN KEY(groupId) REFERENCES AccountGroupEntity(id)
        ON UPDATE CASCADE
        ON DELETE RESTRICT
);

getAllTransactions:
SELECT *
FROM TransactionDetailEntity ORDER BY createdAt DESC LIMIT :limit OFFSET :offset;

getTransactionsCount:
SELECT COUNT(*) FROM TransactionDetailEntity;

getAllTransactionsBetween:
SELECT *
FROM TransactionDetailEntity WHERE createdAt >= :startUTCValue AND createdAt <= :endUTCValue
ORDER BY createdAt DESC LIMIT :limit OFFSET :offset;

getAllTransactionsByType:
SELECT *
FROM TransactionDetailEntity WHERE type = :type ORDER BY createdAt DESC LIMIT :limit OFFSET :offset;

getTransaction:
SELECT *
FROM TransactionDetailEntity WHERE id = :id;

addTransaction:
INSERT INTO TransactionDetailEntity(type, amount, categoryId, accountId, note, createdAt, place)
VALUES (?,?, ?, ?, ?, ?, ?);

updateTransaction:
INSERT OR REPLACE INTO TransactionDetailEntity(id, type, amount, categoryId, accountId, note, createdAt, place)
VALUES ( ?,?, ?, ?, ?, ?, ?, ?);

getLastInsertTransactionRowId:
SELECT last_insert_rowid();

deleteAllTransactions:
DELETE FROM TransactionDetailEntity;

deleteAllTransactionsByType:
DELETE FROM TransactionDetailEntity WHERE type = :type;

deleteTransaction:
DELETE FROM TransactionDetailEntity WHERE id = :id;

changeCategory:
UPDATE TransactionDetailEntity SET categoryId = :newCategory WHERE categoryId = :oldCategory;

numberOfTransactionsByCategory:
SELECT COUNT(*) AS count FROM TransactionDetailEntity WHERE categoryId = :category;

getSumOfAmountByType:
SELECT SUM(amount) AS sum FROM TransactionDetailEntity WHERE type = :type;

getSumOfAmountBetweenByType:
SELECT SUM(amount) AS sum FROM TransactionDetailEntity WHERE type = :type
AND createdAt >= :startUTCValue AND createdAt <= :endUTCValue;

getAllCategories:
SELECT * FROM CategoryEntity;

getCategories:
SELECT * FROM CategoryEntity WHERE type = :type;

deleteCategory:
DELETE FROM CategoryEntity WHERE id = ?;

addCategory:
INSERT INTO CategoryEntity(label, type, iconRes, color)
VALUES (?,?, ?, ?);

getCategory:
SELECT * FROM CategoryEntity WHERE id = ?;

updateCategory:
UPDATE CategoryEntity
SET label = ?, iconRes = ?, color = ?
WHERE id = ?;

searchCategory:
SELECT * FROM CategoryEntity WHERE label = :label AND type = :type;

getTotalTransactionPerDayByTypeBetween:
SELECT createdAt, categoryId, SUM(amount) AS totalAmount FROM TransactionDetailEntity WHERE type = :type AND createdAt >= :startUTCValue AND createdAt <= :endUTCValue GROUP BY createdAt, categoryId ORDER BY createdAt DESC;

getTotalExpenseByCategoryBetween:
SELECT categoryId, SUM(amount) AS totalAmount FROM TransactionDetailEntity WHERE type = "EXPENSE" AND createdAt >= :startUTCValue AND createdAt <= :endUTCValue GROUP BY categoryId ORDER BY totalAmount DESC;

getTotalAmountByCategoryAndTypeBetween:
SELECT categoryId, SUM(amount) AS total FROM TransactionDetailEntity WHERE type = :type AND createdAt >= :startUTCValue AND createdAt <= :endUTCValue GROUP BY categoryId ORDER BY categoryId ASC;

getAllAttachmentsForTransaction:
SELECT * FROM AttachmentEntity WHERE transactionId = ?;

insertAttachment:
INSERT INTO AttachmentEntity (transactionId, name, filePath, fileType, size, imageUri)
VALUES (?, ?, ?, ?, ?, ?);

deleteAttachmentById:
DELETE FROM AttachmentEntity WHERE id = ?;

deleteAttachmentsByTransactionId:
DELETE FROM AttachmentEntity WHERE transactionId = ?;

getAccountGroups:
SELECT * FROM AccountGroupEntity;

getAccountGroupById:
SELECT * FROM AccountGroupEntity WHERE id = ?;

createAccountGroup:
INSERT INTO AccountGroupEntity (name, type) VALUES (?, ?);

updateAccountGroup:
UPDATE AccountGroupEntity SET name = ?, type = ? WHERE id = :id;

deleteAccountGroup:
DELETE FROM AccountGroupEntity WHERE id = ?;

getAccountsByGroupId:
SELECT * FROM AccountEntity WHERE groupId = ?;

getAllAccounts:
SELECT * FROM AccountEntity;

getAccountById:
SELECT * FROM AccountEntity WHERE id = ?;

createAccount:
INSERT INTO AccountEntity (name, groupId) VALUES (?, ?);

updateAccount:
UPDATE AccountEntity SET name = ?, groupId = ? WHERE id = :id;

deleteAccount:
DELETE FROM AccountEntity WHERE id = ?;